/*
 * Created on 2017-03-22 ( Date ISO 2017-03-22 - Time 23:34:18 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */
package org.demo.jsonmapper;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.sql.Timestamp;
import java.util.Date;

import org.demo.bean.MyBeanUtilDate;
import org.demo.jsonmapper.impl.gson.GsonMapper;
import org.demo.jsonmapper.impl.jackson.JacksonMapper;
import org.junit.Test;

/**
 * JUnit tests 
 *
 */
public class MyBeanUtilDateJsonTest {

	private JsonMapper<MyBeanUtilDate> getGsonMapper() {
		return new GsonMapper<MyBeanUtilDate>(MyBeanUtilDate.class);
	}
	private JsonMapper<MyBeanUtilDate> getJacksonMapper() {
		return new JacksonMapper<MyBeanUtilDate>(MyBeanUtilDate.class);
	}

	//----- JACKSON
	@Test
	public void testJacksonUtilDate() {
		testConvert(getJacksonMapper(), new Date() );
	}	
	@Test
	public void testJacksonUtilDateNull() {
		testConvert(getJacksonMapper(), null );
	}	
	@Test
	public void testJacksonSqlDate() {
		testConvert(getJacksonMapper(), java.sql.Date.valueOf("2001-06-22") );
	}	
	@Test
	public void testJacksonSqlTime() {
		testConvert(getJacksonMapper(), java.sql.Time.valueOf("12:34:56") );
	}	

	//----- GSON
	@Test
	public void testGsonUtilDate() {
		testConvert(getGsonMapper(), new Date() );
	}	
	@Test
	public void testGsonUtilDateNull() {
		testConvert(getGsonMapper(), null );
	}	
	@Test
	public void testGsonSqlDate() {
		testConvert(getGsonMapper(), java.sql.Date.valueOf("2001-06-22"));
	}	
	@Test
	public void testGsonSqlTime() {
		testConvert(getGsonMapper(), java.sql.Time.valueOf("12:34:56") );
	}	
	@Test
	public void testGsonSqlTimestamp() {
		java.sql.Time time = java.sql.Time.valueOf("12:34:56");
		//java.sql.Time time = java.sql.Time.valueOf("12:34:56.123");
		testConvert(getGsonMapper(), new java.sql.Timestamp(time.getTime()));
	}	

	//-------------------------------------------------------------------------------------
	private void testConvert(JsonMapper<MyBeanUtilDate> m, Date date) {
		
		System.out.println("-------------------------------------------");
		System.out.println("Mapper : " + m.getClass().getSimpleName() );
		if ( date != null ) {
			System.out.println("Given date : " + date.getClass().getCanonicalName() + " : '" + date + "' ( " + date.getTime() + " )");
		}
		MyBeanUtilDate bean1 = new MyBeanUtilDate();
		bean1.setId((short)1); // "id" : short
		bean1.setBirthDate(date); // "birthDate" : java.util.Date

    	System.out.println("Instance 1 : " + bean1 );

		String json = m.beanToJson(bean1);
    	System.out.println(json );
		
    	MyBeanUtilDate bean2 = m.jsonToBean(json);
    	System.out.println("Instance 2 : " + bean2 );

		assertNotNull(bean2);
		
		System.out.println("driver1 : birthDate = " + bean1.getBirthDate() );
		System.out.println("driver2 : birthDate = " + bean2.getBirthDate() );

		if ( bean1.getBirthDate() != null ) {
			System.out.println("driver1 : birthDate.getTime()  = " + bean1.getBirthDate().getTime() 
					+ " " + bean1.getBirthDate().getClass().getCanonicalName() );
			System.out.println("driver2 : birthDate.getTime()  = " + bean2.getBirthDate().getTime() 
					+ " " + bean1.getBirthDate().getClass().getCanonicalName() );
			assertTrue( bean1.getBirthDate().compareTo(bean2.getBirthDate()) == 0 ); 
			if ( ! ( date instanceof Timestamp ) ) {
				assertTrue( bean1.getBirthDate().equals(bean2.getBirthDate()) ); 
			}
			else {
				Date date1 = bean1.getBirthDate() ; // Real class : Timestamp 
				Date date2 = bean2.getBirthDate() ; // Real class : Date 
				assertTrue( date1.equals(date2) ); 
			}
		}
		
		// If Timestamp 
		// assertEquals( expected : Timestamp, actual : Date )
		assertEquals( bean1.getBirthDate(), bean2.getBirthDate() ); 
	}
}
